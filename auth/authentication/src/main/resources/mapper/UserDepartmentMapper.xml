<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tencent.supersonic.auth.authentication.persistence.mapper.UserDepartmentMapper">
    <resultMap id="UserDepartmentRespMap" type="com.tencent.supersonic.auth.authentication.persistence.dataobject.UserDepartmentResp">
        <id property="userId" column="userId"/>
        <result property="userName" column="userName"/>
        <result property="displayName" column="displayName"/>
        <result property="departmentIds" column="departmentIds" typeHandler="com.tencent.supersonic.auth.authentication.utils.StringToLongListTypeHandler"/>
        <result property="departmentNames" column="departmentNames" typeHandler="com.tencent.supersonic.auth.authentication.utils.StringToStringListTypeHandler"/>
    </resultMap>

    <select id="getUserWithoutDepartment"
            resultType="com.tencent.supersonic.auth.authentication.persistence.dataobject.UserDepartmentDO">
        select user.id as userId, user.name as userName
        from s2_user user
        where user.id not in (select d.user_id from s2_user_department d)
    </select>
    <select id="getUserWithDepartment"
            resultType="com.tencent.supersonic.auth.authentication.persistence.dataobject.UserDepartmentDO">
        SELECT
        ud.id as id,
        u.name AS userName,
        u.id AS userId,
        ud.department_id AS departmentId,
        ud.department_name AS departmentName
        FROM
        s2_user u
        LEFT JOIN
        s2_user_department ud
        ON u.id = ud.user_id

        UNION

        SELECT
        ud.id as id,
        u.name AS userName,
        u.id AS userId,
        ud.department_id AS departmentId,
        ud.department_name AS departmentName
        FROM
        s2_user u
        RIGHT JOIN
        s2_user_department ud
        ON u.id = ud.user_id;


    </select>
    <select id="searchByName"
            resultType="com.tencent.supersonic.auth.authentication.persistence.dataobject.UserDepartmentDO">
        select* from s2_user_department where user_name like concat('%',#{searchName},'%')
    </select>


    <select id="selectPage"
            resultMap="UserDepartmentRespMap">
        SELECT * FROM (
        <![CDATA[
    SELECT
      u.id AS userId,
      u.name AS userName,
      u.display_name AS displayName,
      GROUP_CONCAT(ud.department_id ORDER BY ud.department_id) AS departmentIds,
      GROUP_CONCAT(ud.department_name ORDER BY ud.department_id) AS departmentNames
    FROM s2_user u
    LEFT JOIN s2_user_department ud
      ON u.id = ud.user_id
    WHERE ud.department_id IN
      <foreach item="departmentId" collection="departmentIds" open="(" separator="," close=")">
        #{departmentId}
      </foreach>
    GROUP BY u.id, u.name, u.display_name;
    ]]>
        ) AS derived_table
        LIMIT #{page.size} OFFSET #{page.current}  <!-- 使用 page.size 和 page.current -->
    </select>
    <select id="countUserWithDepartment"
            resultType="java.lang.Integer">
        select count(*) from(
        <![CDATA[
    SELECT
      u.id AS userId,
      u.name AS userName,
      u.display_name AS displayName,
      GROUP_CONCAT(ud.department_id ORDER BY ud.department_id) AS departmentIds,
      GROUP_CONCAT(ud.department_name ORDER BY ud.department_id) AS departmentNames
    FROM s2_user u
    LEFT JOIN s2_user_department ud
      ON u.id = ud.user_id
    WHERE ud.department_id IN
      <foreach item="departmentId" collection="departmentIds" open="(" separator="," close=")">
        #{departmentId}
      </foreach>
    GROUP BY u.id, u.name, u.display_name;
    ]]>
        ) temp
    </select>

</mapper>
